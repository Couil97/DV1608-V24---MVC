{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1 class="site-header">Report</h1>
    <hr>
    <div class="content report">
        <div class="report-aside">
            <h2>Innehållsförteckning</h2>
            <a href="/report#kmom01">Kursmoment 1</a>
            <a href="/report#kmom02">Kursmoment 2</a>
            <a href="/report#kmom03">Kursmoment 3</a>
            <a href="/report#kmom04">Kursmoment 4</a>
            <a href="/report#kmom05">Kursmoment 5</a>
            <a href="/report#kmom06">Kursmoment 6</a>
            <a href="/report#kmom07">Kursmoment 7/10</a>
        </div>
        <div class="kmom">
            <h2>Redoviningar</h2>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 1</h2>
                <div id="kmom01" class="kursmoment-text">
                    Jag har inte gjort alldeles för mycket inom objektorienterad programmering.
                    Jag har jobbat lite med Java tidigare och har hållit på med lite objektorientering i Javascript, men annars har jag inte använt det för mycket.

                    Man behöver vet strukturen på en klass, hur man skapar den (genom "Class") samt om hur klasser fungerar.
                    När man skapar en klass skapar man i princip en ny instans av ett objekt vilket man kan använda och ändra på hur man vill.
                    En klass kan ha fördefinierade attribut samt metoder men de kan även få andra attribut utöver dem.
                    Man kan bestämma vissa attribut genom konstruktorn, vilka dessa är bestämmer programmeraren.

                    Kodbasen var lite svår att förstå i början, det är ju ganska mycket kod.
                    Men som jag förstår det så ligger allting man vill visa användaren i public (bilder, CSS, JS, etc.) och alla vyer lägger man i "templates" mappen.
                    Man kontrollerar vad som ska visas på sidorna genom controllers.

                    Jag personligen tycker att "Design Patterns" är en väldigt viktig del att förstå.
                    Det hjälper en enormt när man ska arbeta med andra samt även när man finner kod på nätet man vill försöka förstå.
                    Dessutom hjälper det en själv att lättare kunna läsa sin egna kod.
                    Ofta händer det att man går tillbaka till kod man har skrivit för länge sedan och inte förstår någonting alls.
                    Om man hade fokuserat på design patterns mer kanske inte detta hade varit ett problem.
                    Dessutom tycker jag även att "Testing" är en bra sektion att läsa igenom.
                    Det är enormt viktigt att ofta testa sin kod, även om man inte själv hittar några fel med den.
                    Ofta när jag använder mina applikationer så brukar jag inte hitta många fel, men dessa fel kan vara väldigt svåra att finna och kan ha extrema konsekvenser.
                    Därför är det väldigt bra att skriva test-kod som gör detta åt en så att man inte missar att t.ex. något blir överskrivet i en databas eller något liknande.

                    TIL hur man sätter upp ett Symfony projekt samt hur controllers fungerar i PHP.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 2</h2>
                <div id="kmom02" class="kursmoment-text">
                    Arv betyder att en klass ärver metoder, konstruktorn eller attribut från en annan klass.
                    Ofta använder man sig av någon form av bas-klass och seden utökar man den andra klassen med mer funktioner.

                    class "Klassnamn" extends "Klass som ska ärvas" {
                    }

                    Komposition är att man kombinerar flera attribut till en och samma klass.
                    T.ex. om man gör en klass person så kommer denna troligen ha ett namn och en ålder.
                    Kombinationen av dess är komposition, man använder sig av flera attribut/metoder för att skapa ett objekt.

                    I PHP kan det t.ex. se ut så här:
                    private firstName;
                    private lastName;
                    private age;

                    Interface är en klass som endast innehåller abstrakta metoder och attribut.
                    Interface används för att skapa en sorts mall för de klasser som ärver från interfacet.
                    Alla klasser som ärver från ett interface måste implementera de metoder och attribut som interfacet har definierat.

                    Interface I"interface-namn" {
                    }

                    En trait är som ett återanvändbart kodblock.
                    Man kan använda metoder och attribut från ett trait men man behöver inte ärva allting.
                    Det liknar sig lite moduler i JavaScript t.ex.

                    trait "trait-namn" {
                    }
                    ...

                    use "trait-namn";

                    Jag lösta uppgiften på ett liknande sätt till "pig-game" som vi gick igenom på föreläsningen.
                    Jag valde att göra en basklass "Card" och en grafisk-klass "cardGraphic".

                    Jag implementerade de metoder som behövdes för att göra alla uppgifter och sedan återanvände jag det mesta av koden till API:et.
                    Jag är nöjd med koden och tyckte att korten faktiskt såg ganska bra ut.
                    Jag tyckte att det blev lite slarvigt i kod uppsättningen, så jag skulle nog kunna snygga till koden lite.

                    Sympfony har varit ganska lätt att komma igång med, men jag den har också haft sina jobbiga bitar också.
                    Att man behöver rensa cachen har varit svårt att komma ihåg.
                    Ibland så sitter jag med ett problem jättelänge innan jag kommer på att jag borde rensa cachen och försöka igen.
                    Det flesta av de sakerna jag har fastnat på har varit p.g.a. att jag inte har rensa cachen.
                    Annars har det gått relativt felfritt med MVC och Symfony.

                    TIL hur man hanterar session med php/Symfony.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 3</h2>
                <div id="kmom03" class="kursmoment-text">
                    Jag vet inte om flödesdiagrammet eller pseudokod hjälpte mig något.
                    Jag brukar ändå tänka på nått liknande sätt när jag programmera, därför tror jag att de inte hjälpte mig så mycket.
                    Dock att ha det nedskrivet hjälpte mig att komma ihåg allting som jag hade planerat.

                    Nästan all kod som jag använde i detta kursmoment hade jag redan gjort i förra momentet.
                    Det enda jag skrev nu var "cardHand" och allting i spel kontrollen.
                    Därför tyckte jag att det var ett relativt lugnt kursmoment och jag är nöjd med min kod.
                    Jag vet faktiskt inte vad hur jag skulle förbättra mina klasser.
                    När det kommer till spelet själv kanske det skulle vara bättre att ha någon form av knapp som lägger till kort utan att sidan behöver återskapas.
                    Dock vet jag inte om detta är möjligt i bara PHP, man kanske skulle behöva Javascript för det.
                    Visserligen skulle man kunna lägga till ett t.ex. Poäng system, flera spelare, etc.
                    Men för den versionen jag gjorde känner jag mig ändå väldigt nöjd över.

                    Symfony har varit ganska lätt att komma in i.
                    Jag trodde det skulle vara mer komplicerat än vad det är, givet att det var väldigt många filer vi installerade i början av kursen.

                    TIL för detta kursmoment var att jag hade väldigt många lint fel och nu vet jag hur jag skall hitta dem.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 4</h2>
                <div id="kmom04" class="kursmoment-text">
                    Här kommer redovisningstexten till kursmomentet.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 5</h2>
                <div id="kmom05" class="kursmoment-text">
                    Här kommer redovisningstexten till kursmomentet.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 6</h2>
                <div id="kmom06" class="kursmoment-text">
                    Här kommer redovisningstexten till kursmomentet.
                </div>
            </div>
             <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 7/10</h2>
                <div id="kmom07" class="kursmoment-text">
                    Här kommer redovisningstexten till kursmomentet.
                </div>
            </div>
        </div>
    </div>
{% endblock %}