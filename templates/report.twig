{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1 class="site-header">Report</h1>
    <hr>
    <div class="content report">
        <div class="report-aside">
            <h2>Innehållsförteckning</h2>
            <a href="/report#kmom01">Kursmoment 1</a>
            <a href="/report#kmom02">Kursmoment 2</a>
            <a href="/report#kmom03">Kursmoment 3</a>
            <a href="/report#kmom04">Kursmoment 4</a>
            <a href="/report#kmom05">Kursmoment 5</a>
            <a href="/report#kmom06">Kursmoment 6</a>
            <a href="/report#kmom07">Kursmoment 7/10</a>
        </div>
        <div class="kmom">
            <h2>Redoviningar</h2>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 1</h2>
                <div id="kmom01" class="kursmoment-text">
                    Jag har inte gjort alldeles för mycket inom objektorienterad programmering.<br>
                    Jag har jobbat lite med Java tidigare och har hållit på med lite objektorientering i Javascript, men annars har jag inte använt det för mycket.<br><br>

                    Man behöver vet strukturen på en klass, hur man skapar den (genom "Class") samt om hur klasser fungerar.<br>
                    När man skapar en klass skapar man i princip en ny instans av ett objekt vilket man kan använda och ändra på hur man vill.<br>
                    En klass kan ha fördefinierade attribut samt metoder men de kan även få andra attribut utöver dem.<br>
                    Man kan bestämma vissa attribut genom konstruktorn, vilka dessa är bestämmer programmeraren.<br><br>

                    Kodbasen var lite svår att förstå i början, det är ju ganska mycket kod.<br>
                    Men som jag förstår det så ligger allting man vill visa användaren i public (bilder, CSS, JS, etc.) och alla vyer lägger man i "templates" mappen.<br>
                    Man kontrollerar vad som ska visas på sidorna genom controllers.<br><br>

                    Jag personligen tycker att "Design Patterns" är en väldigt viktig del att förstå.<br>
                    Det hjälper en enormt när man ska arbeta med andra samt även när man finner kod på nätet man vill försöka förstå.<br>
                    Dessutom hjälper det en själv att lättare kunna läsa sin egna kod.<br>
                    Ofta händer det att man går tillbaka till kod man har skrivit för länge sedan och inte förstår någonting alls.<br>
                    Om man hade fokuserat på design patterns mer kanske inte detta hade varit ett problem.<br>
                    Dessutom tycker jag även att "Testing" är en bra sektion att läsa igenom.<br>
                    Det är enormt viktigt att ofta testa sin kod, även om man inte själv hittar några fel med den.<br>
                    Ofta när jag använder mina applikationer så brukar jag inte hitta många fel, men dessa fel kan vara väldigt svåra att finna och kan ha extrema konsekvenser.<br>
                    Därför är det väldigt bra att skriva test-kod som gör detta åt en så att man inte missar att t.ex. något blir överskrivet i en databas eller något liknande.<br><br>

                    TIL hur man sätter upp ett Symfony projekt samt hur controllers fungerar i PHP.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 2</h2>
                <div id="kmom02" class="kursmoment-text">
                    Arv betyder att en klass ärver metoder, konstruktorn eller attribut från en annan klass.<br>
                    Ofta använder man sig av någon form av bas-klass och seden utökar man den andra klassen med mer funktioner.<br><br>

                    class "Klassnamn" extends "Klass som ska ärvas" {<br>
                    }<br><br>

                    Komposition är att man kombinerar flera attribut till en och samma klass.<br>
                    T.ex. om man gör en klass person så kommer denna troligen ha ett namn och en ålder.<br>
                    Kombinationen av dess är komposition, man använder sig av flera attribut/metoder för att skapa ett objekt.<br><br>

                    I PHP kan det t.ex. se ut så här:<br>
                    private firstName;<br>
                    private lastName;<br>
                    private age;<br><br>

                    Interface är en klass som endast innehåller abstrakta metoder och attribut.<br>
                    Interface används för att skapa en sorts mall för de klasser som ärver från interfacet.<br>
                    Alla klasser som ärver från ett interface måste implementera de metoder och attribut som interfacet har definierat.<br><br>

                    Interface I"interface-namn" {<br>
                    }<br><br>

                    En trait är som ett återanvändbart kodblock.<br>
                    Man kan använda metoder och attribut från ett trait men man behöver inte ärva allting.<br>
                    Det liknar sig lite moduler i JavaScript t.ex.<br><br>

                    trait "trait-namn" {<br>
                    }<br>
                    ...<br><br>

                    use "trait-namn";<br><br>

                    Jag lösta uppgiften på ett liknande sätt till "pig-game" som vi gick igenom på föreläsningen.<br>
                    Jag valde att göra en basklass "Card" och en grafisk-klass "cardGraphic".<br><br>

                    Jag implementerade de metoder som behövdes för att göra alla uppgifter och sedan återanvände jag det mesta av koden till API:et.<br>
                    Jag är nöjd med koden och tyckte att korten faktiskt såg ganska bra ut.<br>
                    Jag tyckte att det blev lite slarvigt i kod uppsättningen, så jag skulle nog kunna snygga till koden lite.<br><br>

                    Sympfony har varit ganska lätt att komma igång med, men jag den har också haft sina jobbiga bitar också.<br>
                    Att man behöver rensa cachen har varit svårt att komma ihåg.<br>
                    Ibland så sitter jag med ett problem jättelänge innan jag kommer på att jag borde rensa cachen och försöka igen.<br>
                    Det flesta av de sakerna jag har fastnat på har varit p.g.a. att jag inte har rensa cachen.<br>
                    Annars har det gått relativt felfritt med MVC och Symfony.<br><br>

                    TIL hur man hanterar session med php/Symfony.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 3</h2>
                <div id="kmom03" class="kursmoment-text">
                    Jag vet inte om flödesdiagrammet eller pseudokod hjälpte mig något.<br>
                    Jag brukar ändå tänka på nått liknande sätt när jag programmera, därför tror jag att de inte hjälpte mig så mycket.<br>
                    Dock att ha det nedskrivet hjälpte mig att komma ihåg allting som jag hade planerat.<br><br>

                    Nästan all kod som jag använde i detta kursmoment hade jag redan gjort i förra momentet.<br>
                    Det enda jag skrev nu var "cardHand" och allting i spel kontrollen.<br>
                    Därför tyckte jag att det var ett relativt lugnt kursmoment och jag är nöjd med min kod.<br>
                    Jag vet faktiskt inte vad hur jag skulle förbättra mina klasser.<br>
                    När det kommer till spelet själv kanske det skulle vara bättre att ha någon form av knapp som lägger till kort utan att sidan behöver återskapas.<br>
                    Dock vet jag inte om detta är möjligt i bara PHP, man kanske skulle behöva Javascript för det.<br>
                    Visserligen skulle man kunna lägga till ett t.ex. Poäng system, flera spelare, etc.<br>
                    Men för den versionen jag gjorde känner jag mig ändå väldigt nöjd över.<br><br>

                    Symfony har varit ganska lätt att komma in i.<br>
                    Jag trodde det skulle vara mer komplicerat än vad det är, givet att det var väldigt många filer vi installerade i början av kursen.<br><br>

                    TIL för detta kursmoment var att jag hade väldigt många lint fel och nu vet jag hur jag skall hitta dem.
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 4</h2>
                <div id="kmom04" class="kursmoment-text">
                    Jag tyckte att det var relativt roligt och lärosamt.<br>
                    Jag brukar inte ha jätte höga standarder på min kod så det var väldigt hjälpsamt att få tydliga beskrivningar av var jag hade missat något.<br>
                    Jag fix ändra ett par saker som inte kom upp när jag testade spelet i förra kursmomentet som kunde ha strulat till det i framtiden.<br>
                    PHPunit verkar också vara ett väldigt grundligt verktyg som man kan lita på.<br>
                    Det var även väldigt lätt att använda och gav ett väldigt fint GUI som jag uppskattade väldigt mycket.<br><br>

                    Jag lyckades få ganska hög kodtäckning.<br>
                    Jag tror jag fick 100% i slutändan.<br>
                    Så jag tycker att det gick väldigt bra, dock så är jag orolig över att min testsuit kanske inte testar koden hårt nog.<br>
                    Om jag skulle förbättra dem skulle jag nog lägga in några mer generella testfall.<br><br>

                    Vissa delar av koden tycker jag är relativt testbar men jag var också tvungen att ändra ett par delar för att kunna göra tester.<br>
                    Jag skulle t.ex. kunna lägga till ett par metoder så att jag inte behöver skriva lika mycket kod i test klasserna.<br>
                    Jag gjorde ett par nya metoder för test suiten men man kan nog göra fler.<br><br>

                    Jag la till en metod som hette "cardInDeck" som kollade om ett kort existerade i kortleken.<br>
                    Utan denna hade det varit relativt svårt att testa om man t.ex. hade dragit ett riktigt kort från kortleken eller om det kortet man drog bara existerade i tomma intet.<br>
                    Ja lade även till metoden "getCardAt" som gav mig ett kort på ett specifikt index.<br>
                    Denna hjälpte till att säkerställa att man alltid drog samma kort under testerna.<br><br>

                    En kod som är väldigt lätt läst kan även vara väldigt testbar.<br>
                    Jag tror inte att det skulle vara några svårigheter att få en både testbar och "snygg och ren" kod.<br>
                    Det enda som kanske skulle påverka kodens struktur är om man behöver lägga till ny funktionalitet i koden.<br><br>

                    TIL för detta moment: Hur man skriver enhetstester!
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 5</h2>
                <div id="kmom05" class="kursmoment-text">
                <div>
                    <div><span>Det var inte n&aring;gonting s&auml;rskilt som jag t&auml;nkte p&aring; under &ouml;vningen.</span></div>
                    <div><span>Dock s&aring; tyckte jag att det var ett v&auml;ldigt anv&auml;ndarv&auml;nligt verktyg att jobba med.</span></div>
                    <div><span>Jag gillade faktumet att den genererade klasser och produktregister &aring;t en.</span></div>
                    <br />
                    <div><span>Det enda jag t&auml;nkte p&aring; innan jag b&ouml;rjade med applikationen var att jag ville ha n&aring;gon form av navigering inom det sj&auml;lva biblioteket.</span></div>
                    <div><span>Jag ville att man fr&aring;n vilken sida som helst skulle kunna g&aring; till en annan del av biblioteket.</span></div>
                    <div><span>Jag &aring;stadkom detta med hj&auml;lp av en inneh&aring;llsf&ouml;rteckning.</span></div>
                    <div><span>Annars ville jag att gr&auml;nssnittet skulle vara relativt simpelt och enkelt att anv&auml;nda.</span></div>
                    <br />
                    <div><span>Det var helt ok att jobba med ORM, det k&auml;ndes i princip som att jobba direkt mot databasen.</span></div>
                    <div><span>Det var l&auml;tt att komma ig&aring;ng med och smidigt att arbeta med.</span></div>
                    <div><span>Jag hade inte n&aring;gra st&ouml;rre problem med ORM alls.</span></div>
                    <br />
                    <div><span>Jag tycker att det var ett v&auml;ldigt smidigt s&auml;tt att jobba med databaser.</span></div>
                    <div><span>Att jobba med objekt i databasen som klasser var riktigt bra tyckte jag.</span></div>
                    <div><span>Man f&aring;r b&auml;ttre struktur i sin kod och man kan fortfarande g&ouml;ra allt det man kunde med vanliga SQL.</span></div>
                    <div><span>Jag kommer nog anv&auml;nda n&aring;got liknande i framtiden n&auml;r jag jobbar mot databaser.</span></div>
                    <br />
                    <div><span>TIL: Hur ORM fungerar och dess f&ouml;rdelar</span></div>
                </div>
                </div>
            </div>
            <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 6</h2>
                <div id="kmom06" class="kursmoment-text">
                Jag tyckte att phpmetrics var ett väldigt hjälpsamt verktyg.
                Jag använde för det mesta endast deras komplexitet värden samt deras "issues" flik.
                Dessa fann jag väldigt hjälpsamma när det kom till att förbättra min kod.
                Man märkte fort att när man minskade komplexiteten så blev koden mycket lättare att arbeta med.
                Även bilden med cirklarna i överblicken där man såg allas maintainability tyckte jag var användbar.<br><br>

                Jag önskade att man hade fått mer fel i scrutinizer eftersom att det kändes som att det skulle vara otroligt hjälpsamt för att städa upp ens kod.
                Tyvärr fick jag endast ett fåtal fel och fick knappt använda det.
                Jag gillar dock att de ger ett värde på hur bra ens kod är.
                Det hjälper en snabbt kolla över om man behöver förbättra någonting.
                Även deras issues flik tyckte jag var bra, den var lätt att använda och de gav bra förklaringar för alla fel.
                I mitt första bygge fick jag en kodkvalitet på 9,96 och en täckning på 24%.<br><br>

                Jag tycker att kodkvalitet är en bra sak att ha, speciellt på open-source program där många olika programmerare möjligen kan påverka koden.
                Om man har hög kodkvalitet kommer det nog också vara lättare att arbeta med den koden.
                Därför tycker jag personligen det är bra att visa upp den på ställen så som GitHub, så om folk vill till exempel forka repot så vet de hur bra hudkvaliteten är.<br><br>

                TIL hur man förbättrar kvalitén på sin kod.           
                </div>
            </div>
             <div class="kursmoment">
                <h3 class="kmom-header">Kursmoment 7/10</h2>
                <div id="kmom07" class="kursmoment-text">
                    <h2>Krav 1-3</h2><br>
                    Jag valde att göra ett femkorts-poker spel till kursmoment 10. Jag började med att göra en landningssida för spelet. Denna sidan är endast en knapp och lite inställningar  för att börja spelet.
                    När man klickar på knappen börjar spelet och man är given en hand. Man kan välja vilka kort man vill kasta genom att trycka på dem och sedan trycka på "dra kort".
                    När man gör detta tas dessa kort bort och man får nya kort tilldelade till sig. Under väljer CPUerna vilka kort de vill kasta samt hur mycket de vill satsa.
                    Detta är helt och hållet slumpmässigt, jag ville göra olika svårighetsgrader men jag hade inte tillräckligt mycket tid för att klara av detta.
                    Förutom att dra korten kan man även satsa en mängd av sina chips. Spelet varar i 3 rundor och man kan dra kort 3 gånger per runda.
                    När spelet är avslutas visas vinnaren samt även en knapp för att gå till startsidan.<br><br>

                    Jag valde att göra en helt ny stylesheet för detta projekt. Den lånar ett par saker från den gamla stilen (t.ex. kort och layout) men färgerna samt vissa delar av layouten är helt annorlunda.
                    Den är dark-mode och har ett par accentfärger i sig. Jag ville att det skulle till viss del likna ett pokerbord som man möjligen ser på ett kasino men igen hade jag inte tillräckligt mycket tid för att åstadkomma detta.
                    Jag valde att nöja mig med en simpel design som har ett par drag från ett pokerbord.<br><br>

                    Jag valde även att försöka få så mycket coverage i mina tester som möjligt. Jag hade lite problem med en av mina metoder (gameboard->finish()) så jag avvaktade att skriva tester för den. 
                    Jag är nästan helt säker att programmet funkar som det ska men jag kunde inte få testerna till den metoden att fungera. Jag fick till slut 97% coverage i mina klass-filer. 
                    Jag valde även att inte ta med kontrollerna i min test-suit för jag kunde inte hitta ett sätt att skicka med min session till kontrollerna.<br><br>

                    <h2>Allmänt om projektet</h2><br>
                    Projektet gick relativt bra att genomföra. Jag började med att skriva mina klasser, sedan skrev jag tester till dessa klasser. Jag skrev sedan mina kontroller samt till sist skrev jag stylen för hela webbsidan.
                    Jag stötte inte på några större bekymmer under projektets gång utan det enda jag hade lite problem med var att få den gameboard->finish() att fungera i mina tester.
                    Jag var överraskad hur lätt det var att skriva pokerhand detektionen, jag trodde detta skulle vara mycket svårare. Jag tyckte att designen och templatingen var lättast och kontrollerna samt sessionen var svårast att få att funka.<br><br>

                    Projektet var en relativt bra utmaning tyckte jag. Det tog ungefär 20-30 timmar att genomföra.<br><br>
                    <h2>Allmänt om kursen</h2><br>
                    Överlag tycker jag att kursen har varit rolig. Lite av en utmaning i jämförelse med de andra kurserna. Dock så tycker jag att det är bra att man får utmana sig då och då.
                    Handledningen har varit fantastisk, likasom i de andra kurserna. Materialet har även det varit väldigt bra. 
                    Det fanns alltid möjligheter att fördjupa sig, man behövde inte t.ex. gå och googla på mycket utan man kunde få reda på allting genom kursmaterialet.
                    Samtidigt behövde man inte heller stressa om att läsa absolut allt material, vilket jag uppskattade väldigt mycket.
                    Det var en väldig rolig kurs samt kurspaket som jag lätt skulle kunna rekommendera till andra.
                </div>
            </div>
        </div>
    </div>
{% endblock %}